#include "imports/stdlib.fc";

global slice TELEMARKET_ADDR;

global int LAST_REQ_SEQNO;

() init_replay_protection() impure {
    LAST_REQ_SEQNO = 0;
}

() set_telemart_addr(slice addr) impure {
    TELEMARKET_ADDR = addr;
}

(int, int) calculate_split(int amount) inline {
    int TON = 1000000000;
    int threshold = 39 * TON;
    int commission = (amount < threshold) ? (amount * 5 / 100) : (amount * 3 / 100);
    int seller_amount = amount - commission;
    return (commission, seller_amount);
}

() send_payment(slice src, slice dst, int value) impure {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(src)
        .store_slice(dst)
        .store_coins(value)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();
    send_raw_message(msg, 64);
}

() process_trade(slice buyer, slice seller, int amount) impure {
    throw_if(101, amount <= 0);

    (int commission, int seller_amount) = calculate_split(amount);

    send_payment(buyer, TELEMARKET_ADDR, commission);

    send_payment(buyer, seller, seller_amount);
}

int main(slice in_msg_body) impure {
    int req_seqno = in_msg_body~load_uint(32);
    int expire_at = in_msg_body~load_uint(32);
    int amount = in_msg_body~load_uint(64);
    slice seller = in_msg_body~load_msg_addr();
    slice buyer = in_msg_body~load_msg_addr();

    throw_if(102, req_seqno != (LAST_REQ_SEQNO + 1));

    throw_if(103, now() > expire_at);

    accept_message();

    LAST_REQ_SEQNO = req_seqno;

    process_trade(buyer, seller, amount);
    return 0;
}
