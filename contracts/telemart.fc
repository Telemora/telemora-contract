#include "imports/stdlib.fc";

() set_telemart_addr(slice addr) impure {
    set_data(begin_cell().store_slice(addr).store_uint(0, 32).end_cell());
}

slice get_telemarket_addr() method_id {
    slice ds = get_data().begin_parse();
    return ds~load_msg_addr();
}

() init_replay_protection() impure {
    slice ds = get_data().begin_parse();
    slice owner = ds~load_msg_addr();
    set_data(begin_cell().store_slice(owner).store_uint(0, 32).end_cell());
}

(int, int) calculate_split(int amount) inline {
    int TON = 1000000000;
    int threshold = 39 * TON;
    int commission = (amount < threshold) ? (amount * 5 / 100) : (amount * 3 / 100);
    int seller_amount = amount - commission;

    slice ds = get_data().begin_parse();
    int current_commission = ds~load_uint(64);

    set_data(begin_cell().store_uint(current_commission + commission, 64).end_cell());

    return (commission, seller_amount);
}

() send_payment(slice dst, int value) impure {
    throw_if(201, value <= 0);

    send_raw_message(begin_cell()
        .store_uint(0x10, 32)
        .store_slice(dst)
        .store_int(value, 64)
        .end_cell(), 3);
}

() process_trade(slice buyer, slice seller, int amount) impure {
    throw_if(101, amount <= 0);

    (int commission, int seller_amount) = calculate_split(amount);

    slice telemarket_addr = get_telemarket_addr();

    send_payment(telemarket_addr, commission);

    send_payment(seller, seller_amount);
}

int main(slice in_msg_body) impure {
    int req_seqno = in_msg_body~load_uint(32);
    int expire_at = in_msg_body~load_uint(32);
    int amount = in_msg_body~load_uint(64);
    slice seller = in_msg_body~load_msg_addr();
    slice buyer = in_msg_body~load_msg_addr();

    slice ds = get_data().begin_parse();
    slice owner = ds~load_msg_addr();
    int last_req_seqno = ds~load_uint(32);

    throw_if(102, req_seqno != (last_req_seqno + 1));

    throw_if(103, now() > expire_at);

    accept_message();

    set_data(begin_cell().store_slice(owner).store_uint(req_seqno, 32).end_cell());

    process_trade(buyer, seller, amount);
    return 0;
}
