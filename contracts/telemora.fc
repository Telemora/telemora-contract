#include "imports/stdlib.fc";

const int OP_PROCESS_ORDER_PAYMENT = 0x12345;

const int ERR_INVALID_OPCODE = 7;
const int ERR_INVALID_AMOUNT = 10;
const int ERR_UNAUTHORIZED_SENDER = 100;
const int ERR_COMMISSION_EXCEEDS_TOTAL = 104;
const int ERR_CONTRACT_NOT_INITIALIZED = 105;
const int ERR_INVALID_SIGNATURE = 107;
const int ERR_MESSAGE_EXPIRED = 108;
const int ERR_AMOUNT_MISMATCH = 109;
const int ERR_INVALID_COMMISSION_VALUE = 110;
const int ERR_INVALID_MARKETPLACE_ADDR = 111;

int equal_slices(slice a, slice b) asm "SDEQ";
int check_signature(int hash, slice signature, int public_key_int) asm "CHKSIGNU";

(int, slice) load_data() inline {
    slice data_slice = get_data().begin_parse();
    throw_if(ERR_CONTRACT_NOT_INITIALIZED, data_slice.slice_empty?());
    int public_key = data_slice~load_uint(256);
    slice marketplace_addr = data_slice~load_msg_addr();
    return (public_key, marketplace_addr);
}

() save_data(int public_key, slice marketplace_addr) inline {
    set_data(
        begin_cell()
            .store_uint(public_key, 256)
            .store_slice(marketplace_addr)
            .end_cell()
    );
}

(int, slice) get_contract_config() method_id {
    (int public_key, slice marketplace_addr) = load_data();
    return (public_key, marketplace_addr);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    accept_message();

    int op = in_msg~load_uint(32);
    int query_id = in_msg~load_uint(64);

    (int public_key, slice marketplace_addr) = load_data();
    slice sender_addr = in_msg_cell~load_msg_addr();

    if (op == OP_PROCESS_ORDER_PAYMENT) {
        int order_id = in_msg~load_uint(64);
        slice seller_addr = in_msg~load_msg_addr();
        slice marketplace_addr_from_msg = in_msg~load_msg_addr();
        int commission_bps = in_msg~load_uint(16);
        int amount_from_signed_data = in_msg~load_coins();
        int expiry_timestamp = in_msg~load_uint(32);
        slice signature = in_msg~load_bits(512);

        throw_unless(ERR_INVALID_AMOUNT, msg_value > 0);
        throw_unless(ERR_UNAUTHORIZED_SENDER, sender_addr.preload_uint(2) == 0x80);

        cell data_to_sign_cell = begin_cell()
            .store_uint(order_id, 64)
            .store_slice(seller_addr)
            .store_slice(marketplace_addr_from_msg)
            .store_uint(commission_bps, 16)
            .store_coins(amount_from_signed_data)
            .store_uint(expiry_timestamp, 32)
            .end_cell();

        int recomputed_hash = data_to_sign_cell.cell_hash();

        throw_unless(ERR_INVALID_SIGNATURE, check_signature(recomputed_hash, signature, public_key));
        throw_unless(ERR_MESSAGE_EXPIRED, now() <= expiry_timestamp);
        throw_unless(ERR_AMOUNT_MISMATCH, msg_value >= amount_from_signed_data);
        throw_unless(ERR_INVALID_MARKETPLACE_ADDR, equal_slices(marketplace_addr_from_msg, marketplace_addr));
        throw_unless(ERR_INVALID_COMMISSION_VALUE, commission_bps >= 0 & commission_bps <= 10000);

        int commission_amount = msg_value * commission_bps / 10000;
        throw_unless(ERR_COMMISSION_EXCEEDS_TOTAL, commission_amount < msg_value);
        int seller_payout_amount = msg_value - commission_amount;

        ;;; send commission to marketplace
        send_raw_message(
            begin_cell()
                .store_uint(0x18, 6)
                .store_slice(marketplace_addr_from_msg)
                .store_coins(commission_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_uint(query_id, 64)
                .end_cell(),
            1
        );

        ;;; send payout to seller
        send_raw_message(
            begin_cell()
                .store_uint(0x18, 6)
                .store_slice(seller_addr)
                .store_coins(seller_payout_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32)
                .store_uint(query_id, 64)
                .end_cell(),
            1
        );
    } else {
        throw(ERR_INVALID_OPCODE);
    }
}
