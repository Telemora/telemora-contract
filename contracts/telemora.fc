#include "imports/stdlib.fc";

const BOUNCEABLE = 0x18;
const NON_BOUNCEABLE = 0x10;

const op::admin_withdraw = "op::admin_withdraw"c;
const op::change_percent = "op::change_percent"c;

global slice ctx_admin_addr;
global int ctx_percent;

(slice, int) load_data() inline {
    var ds = get_data().begin_parse();

    ctx_admin_addr = ds~load_msg_addr();
    ctx_percent = ds~load_int(11);

    ds.end_parse();
    return (ctx_admin_addr, ctx_percent);
}

() save_data(slice ctx_admin_addr, int ctx_percent) impure inline {
    set_data(begin_cell()
        .store_slice(ctx_admin_addr)
        .store_int(ctx_percent, 11)
        .end_cell());
}

(int) calc_commission_deduction(int amount, int percent) inline {
    int fee = muldiv(amount, percent, 10000);
    int deducted = amount - fee;
    return deducted;
}

() send_msg(slice to_address, int amount, cell payload, int flags, int send_mode) impure inline_ref;

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) {
    var (ctx_admin_addr, ctx_percent) = load_data();

    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    if (equal_slice_bits(sender, ctx_admin_addr)) {
        if (op == op::admin_withdraw) {
            in_msg_body~load_uint(64);
            int amount = in_msg_body~load_coins();

            send_msg(ctx_admin_addr, amount, null(), BOUNCEABLE, 3);
        }

        if (op == op::change_percent) {
            in_msg_body~load_uint(64);
            int new_percent = in_msg_body~load_int(11);
            save_data(ctx_admin_addr, new_percent);
        }
    } else {
        int payout = calc_commission_deduction(msg_value, ctx_percent);
        slice seller_address = in_msg_body~load_msg_addr();

        send_msg(seller_address, payout, null(), NON_BOUNCEABLE, 3);
    }
}

() send_msg(slice to_address, int amount, cell payload, int flags, int send_mode) impure inline_ref {
    int has_payload = ~ cell_null?(payload);

    builder msg = begin_cell()
        .store_uint(flags, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(has_payload ? 1 : 0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

    if (has_payload) {
        msg = msg.store_ref(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

(slice) get_admin_address() method_id {
    var (ctx_admin_addr, _) = load_data();
    return ctx_admin_addr;
}

(int) get_commission_percent() method_id {
    var (_, ctx_percent) = load_data();
    return ctx_percent;
}
